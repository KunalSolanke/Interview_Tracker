var express = require("express");
var path = require("path");
var cookieParser = require("cookie-parser");
const cors = require("cors");
var logger = require("morgan");
const expressLayouts = require("express-ejs-layouts");
require("dotenv").config();

const {
  baseRouter,
  usersRouter,
  problemRouter,
  interview,
  socialRouter,
} = require("./routes");
const { User } = require("./models");
const AdminBro = require("admin-bro");
const AdminBroExpress = require("@admin-bro/express");
const AdminBroMongoose = require("@admin-bro/mongoose");
const mongoose = require("mongoose");
const mongoURI = process.env.MONGO_URI;

(async () => {
  const connection = await mongoose.connect(mongoURI, {
    useCreateIndex: true,
    useNewUrlParser: true,
    useUnifiedTopology: true,
    retryWrites: true,
    useFindAndModify: false,
  });

  await AdminBro.registerAdapter(AdminBroMongoose);

  const adminBro = new AdminBro({
    databases: [connection],
    rootPath: "/admin",
    loginPath: "/admin/login",
  });

  var app = express();
  app.use(logger("tiny"));

  let router = express.Router();
  const session = require("./middlewares/express-mongo-store");
  app.use(session);
  router.use(session);
  router = AdminBroExpress.buildAuthenticatedRouter(
    adminBro,
    {
      authenticate: async (email, pass) => {
        try {
          const admin = await User.findByCredentials(email, pass);
          return admin;
        } catch (err) {
          console.log(err);
          return null;
        }
      },
      cookiePassword: process.env.ADMIN_COOKIE_SECRET,
    },
    router,
    {
      uri: process.env.MONGO_URI,
      collection: "admin-sessions",
      expires: 1000 * 60 * 60 * 24 * 30,
      connectionOptions: {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        serverSelectionTimeoutMS: 10000,
      },
    }
  );
  router = AdminBroExpress.buildRouter(adminBro, router);

  app.use("/admin", router);
  app.use(express.json());
  var corsOption = {
    origin: true,
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
    credentials: true,
    exposedHeaders: [
      "x-auth-token",
      "set-cookie",
      "authorization",
      "content-type",
      "credentials",
      "cache-control",
    ],
  };
  app.use(cors(corsOption));
  app.use(express.urlencoded({ extended: true }));
  app.use(cookieParser());
  app.set("views", path.join(__dirname, "views"));
  app.set("view engine", "ejs");
  app.use(expressLayouts);

  //to add body to default request object generated by express

  //to add cookies to default request object generated by express
  const auth = require("./middlewares/auth");
  app.use(auth);

  app.use("/static", express.static(path.join(__dirname, "public")));

  app.use("/", baseRouter);
  app.use("/accounts", usersRouter);
  app.use("/problems", problemRouter);
  app.use("/interviews", interview);
  app.use("/auth/social", socialRouter);

  // error handler
  app.use(function (err, req, res, next) {
    res.locals.message = err.message;
    res.locals.error = req.app.get("env") === "development" ? err : {};
    console.log(err);
    res.status(err.status || 500);
    res.send("Error");
  });

  /// testing
  const PORT = process.env.PORT || 8080;
  app.listen(PORT, () => {
    console.log(`http://localhost/${PORT}`);
  });
})();
